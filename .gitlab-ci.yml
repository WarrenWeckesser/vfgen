# use the official gcc image, based on debian
# can use versions as well, like gcc:5.2
# see https://hub.docker.com/_/gcc/
image: gcc:8.3

test:
  script:
    - echo "Installing vfgen"
    - apt-get -y update && apt-get -y install cmake libmxml-dev libginac-dev
    - cd cmake_build
    - cmake ../src
    - make
    - make install
    - cd ../tests
    - echo "Testing help"
    - vfgen help help
    - echo "Testing octave"
    - cd test_octave
    - bash run_test.sh
    - cd ..
    - echo "Testing dde_solver"
    - cd test_dde_solver
    - bash run_test.sh
    - cd ..
    - echo "Testing lsoda"
    - cd test_lsoda
    - bash run_test.sh
    - cd ..
    - echo "Testing gsl"
    - cd test_gsl
    - bash run_test.sh
    - cd ..
    - echo "Testing boostodeint"
    - cd test_boostodeint
    - apt-get -y install libboost-math-dev
    - bash run_test_boostodeint_default_noparams.sh
    - bash run_test_boostodeint_default_params.sh
    - bash run_test_boostodeint_implicit_noparams.sh
    - bash run_test_boostodeint_implicit_params.sh
    - cd ..

  #
  #artifacts:
  #  paths:
  #    - cmake_build/vfgen
  #
  # depending on your build setup it's most likely a good idea to cache outputs
  # to reduce the build time
  # cache:
  #   paths:
  #     - "*.o"

# run tests using the binary built before
# (This doesn't work--the binary probably needs to be saved somewhere.)
#test:
#  stage: test
#  script:
#    - cd cmake_build
#    - ./vfgen help
